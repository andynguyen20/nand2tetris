// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    Not16(in = x, out = notx);
    And16(a = x, b = notx, out = zero); // 16-bit zero
    Not16(in = zero, out = one); // 16-bit one

    Mux16(a = x, b = zero, sel = zx, out = xZeroResult); //modified x after zx operation
    Not16(in = xZeroResult, out = notxZeroResult);
    Mux16(a = xZeroResult, b = notxZeroResult, sel = nx, out = xZeroNegateResult);

    Mux16(a = y, b = zero, sel = zy, out = yZeroResult); 
    Not16(in = yZeroResult, out = notyZeroResult);
    Mux16(a = yZeroResult, b = notyZeroResult, sel = ny, out = yZeroNegateResult);

    Add16(a = xZeroNegateResult, b = yZeroNegateResult, out = orResult);
    And16(a = xZeroNegateResult, b = yZeroNegateResult, out = andResult);
    Mux16(a = andResult, b = orResult, sel = f, out = fResult);
    
    Not16(in = fResult, out = notfResult);

    Mux16(a = fResult, b = notfResult, sel = no, out = out);

    Mux16(a = fResult, b = notfResult, sel = no, out[0..7] = first8Bits, out[8..15] = last8Bits);
    Or8Way(in = first8Bits, out = evalFirst8Bits);
    Or8Way(in = last8Bits, out = evalLast8Bits);
    Or(a = evalFirst8Bits, b = evalLast8Bits, out = notzr);
    Not(in = notzr, out = zr);

    Not(in = x[0], out = notxOneBit);
    And(a = x[0], b = notxOneBit, out = zeroOneBit); // 1-bit zero
    Not(in = zeroOneBit, out = oneOneBit); // 1-bit one
    Mux16(a = fResult, b = notfResult, sel = no, out[15] = MSB, out[0..14] = unusedVar);
    Mux(a = zeroOneBit, b = oneOneBit, sel = MSB, out = ng);

    

}