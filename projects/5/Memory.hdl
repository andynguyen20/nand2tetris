// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:

    //MSB = 0 -> select from 16K RAM addresses (14-bit addresses), MSB = 1 -> select from screen or keyboard addresses (15-bit addresses) 
    Not(in = address[14], out = notMSB); //Not to use in convenience of the And gate
    And(a = load, b = notMSB, out = addressSelectionBit); 
    RAM16K(in = in, load = addressSelectionBit, address = address[0..13], out = addressOut);


    And(a = load, b = address[14], out = screenSelectionBit);
    Mux(a = false, b = true, sel = address[12], out = fourKSelectionBit); //selects which 4K RAM chip to utilize of the 8K addresses for the screen    
    And(a = screenSelectionBit, b = fourKSelectionBit, out = actualScreenSelectionBit);
    RAM4K(in = in, load = actualScreenSelectionBit, address = address[0..11], out = upperScreenAddressOut);
    RAM4K(in = in, load = actualScreenSelectionBit, address = address[0..11], out = lowerScreenAddressOut);

    And(a = load, b = address[13], out = keyboardLoad);
    Register(in = in, load = keyboardLoad, out = keyboardAddressOut);

    Mux4Way16(a = in, b = addressOut, c = upperScreenAddressOut, d = keyboardAddressOut, sel = address[13..14], out = prerequisiteOut);

    Mux16(a = prerequisiteOut, b = lowerScreenAddressOut, sel = address[12], out = out);

}